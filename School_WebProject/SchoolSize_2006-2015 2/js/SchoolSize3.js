
// FINAL PROJECT SCHOOL SIZE CHANGES: 2006 - 2015 MAP: script #3
// BASED ON CLASS 12: EXAMPLE WTIH ANNOTATION
// D3.js PIE CHART and LEAFLET and BOOTSTRAP

var map = L.map('map');
    map.fitBounds([
    [40.685626, -73.956567],
    [40.700211, -73.989289]
]);
var OpenMapSurfer_Grayscale = L.tileLayer('http://korona.geog.uni-heidelberg.de/tiles/roadsg/x={x}&y={y}&z={z}', {
     minZoom: 10,
    maxZoom: 19,
    attribution: 'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
});
// add these tiles to our map
map.addLayer(OpenMapSurfer_Grayscale);
// set data layer as global variable so we can use it in the layer control below
var schoolSize_geoJSON;


$.getJSON( "geojson/D13Enrollment06-15.geojson", function( data ) {
    var dataset = data;
    // draw the dataset on the map
    plotDataset(dataset);
    //creates a dropdown in the sidebar that we can use to fire map events and update the D3 chart
    // createDropdown(dataset);
});

// function to plot the dataset passed to it
function plotDataset(dataset) {
    schoolSize_geoJSON = L.geoJson(dataset, {
    //     style: mapStyle,
     //   onEachFeature: mapOnEachFeature
    }).addTo(map);

    // create layer controls
    // createLayerControls(); 
}
// create a layer groups to catch the new markers
var dotsGroup = L.featureGroup();

// set dataset as global variable and empty
var dataset;

////////////////////////////////////////////////////

// d3.csv("data/ssoreports.csv", function(data) { 
// 	dataset = data;
	
// 	parseIntegers(dataset);
// 	parseDates(dataset);
	
// 	dateView = 2;
// 	// variable set to decide which view to use -- two options set below
// 	// draw dots below with the dateView = 2 passed to it
// 	drawDots(dataset, dateView);
	
// });

// HOW DO I USE year data when dates are primary keys or headers for each column of data??


// function parseIntegers(dataset) {
// 	$.each(dataset, function( i, d ) {
// 		d.GrowthDeclineInt = parseInt(d.GrowthDecline);
// 	});
// }
// function parseDates(dataset) {
// 	// parse dates from strings into date objects
// 	//use d3 to set format of date below, this is a d3 function -- see d3 page on this for reference it is all explained and other options there
// 	var dateTimeFormatSlash = d3.time.format("%Y/%m/%d %I:%M %p");
// 	// the format ("%X") is a standard javascript date format -- it's a convenience functino that shortens code 
//  	var dateFormatSlash = d3.time.format("%x");

// 	var dateTimeFormat = d3.time.format("%m-%d-%y %I:%M %p");
// 	var dateFormat = d3.time.format("%m-%d-%y");
// // loop through each thing in data set
// 	$.each(dataset, function( i, d ) {
// 		if (d.discovery_date) {
// 			console.log(d.discovery_date);
// 			var discovery_date_string = d.discovery_date;
// 			var dateObject = dateTimeFormatSlash.parse(discovery_date_string);
// 			// if nothing in discover-date-string, then 
// 			if (dateObject) {
// 				console.log(d.discovery_date);
// 				d.discovery_date_object = dateObject;
// 			} 
// 		}		

// 		if (d.ending_date_time) {
// 			var ending_date_time_string = d.ending_date_time;
// 			var dateObject = dateTimeFormatSlash.parse(ending_date_time_string);
// 			if (dateObject) {
// 				d.ending_date_time_object = dateObject;
// 			} 
// 		}		

// 		if (!d.expected_ending_date_time || d.expected_ending_date_time == 'Expected ending date of discharge not reported') {
// 		} else {
// 			var expected_ending_date_time_string = d.expected_ending_date_time;
// 			var dateObject = dateTimeFormatSlash.parse(expected_ending_date_time_string);
// 			if (!dateObject) {
// 				d.expected_ending_date_time_object = dateObject;
// 			} 
// 		}

	//});
//}


///////

function drawDots(dataset) {
// function drawDots(dataset, dateView) {
// this was from above with dateView
// before dimensions set
	console.log(dataset);
	// nothing on console from this
// cross filter is a plugin function? data dimensions: any variable in dataset can be made into dimensions and use it to filter out multiple other data
    // load dataset into crossfilter (look this up on github (crossfilter and square))
    // this tool can allow oen to use multilple aspects of data to filter things, like distance, time, etc. 
    // works by setting up dimensions. see below
	var cf = crossfilter(dataset);

	// set dimensions for filtering by sample date: anonymous function calls back to data above
	// needs to be javascript date hence the discover_date_object in function below
	// all data live in the cf.dimension because it's been passed through the crossfilter
	var bySchoolSize = cf.dimension(function(d) { return d.GrowthDecline; });
	console.log(byStudentChange); // bySampleDate = cross filter variable
	// above console.log will show the crossfilter data and functions generated by the crossfilter which are bound to dataset
	// use to sort data, use bottom and top records, filterAll one gets all of data, filterExact allows one to use specific number or string: ie if you want data only for Troy, NY
	// or if you want to look for specific volume of spills or
	// we will use filterRange because we an to set date range to see spill in that time
	// use dot chaining for this because filters are already bound to dataset

	// default values for filterMin and filterMax
	// don't always know min and max dates since new data comes in: this figures that out
	var datadateMin = d3.min(dataset, function(d) { return d.GrowthDecline; });
	var datadateMax = d3.max(dataset, function(d) { return d.GrowthDecline; });
	// Not offereing time based choices, so I think below is not needed: cloning because for some reason we want to extract a date from data and make a new one???
	// var filterMax = datadateMax.clone();
	
	// // set filterMin base on selection
	// if (dateView == 1) {
	// 	var filterMin = datadateMax.clone();
	// 	//dateView gets passed into drawDots function (initiated above at top of object)
	// 	filterMin.addDays(-7); // gives 7 day range
	// } else if (dateView == 2){  
	// 	var filterMin = datadateMax.clone();
	// 	filterMin.addMonths(-1); 
	// } else if (dateView == 3) {
	// 	var filterMin = datadateMin.clone();
	// }	
		
	// initialize map and charts
	initialize_map(filterMin, filterMax, datadateMin, datadateMax, bySampleDate);


///////////////////////////////////////////////////////

function initialize_map(filterMin, filterMax, datadateMax, datadateMin, byStudentChange) {

	// clear all map layers	
	dotsGroup.clearLayers();

	// clear legend 
	d3.select(".legendmap").remove();

	// pass date objects to the legend function filterMin and Max set above
	drawTimeControlLegend(filterMin, filterMax);

	// filter data by data range selected: using crossfilter functions range variable knows it's a date: filterMin, filterMax are JS objects being passed
	//into function. 
	byStudentChange.filterRange([filterMin, filterMax]);

	// return all data within the filterneed to extract data from variables .top(infinitey )
	var dataByStudentChange = byStudentChange.top(Infinity);
	console.log(dataByStudentChange);

	// iterate thorugh dataset and create a markers and a marker group for the points
	// fpr each loop. (all data sits in d. whatever field is)
	$.each(dataByStudentChange, function( i, d ) {

	
		if (!d.latitude || !d.longitude) {
		} else {

			// set dot fill color
	   		if (d.GrowthDecline > 0) {
	   			//If enrollment numbers reflect an expansion 
		   		dot_color = "#F03B20";
	   		} else if (d.GrowthDecline === 0) {
	   			//If count is greater than zero in Decline column I want nothing to appear
		   		dot_color = "null";
	   		} else if (d.GrowthDecline < 0) {
	   			//If count is within the possible risk range
		   		dot_color = "#FFEDA0";
	   		} else {
	   			//If count is within the unacceptable range
		   		dot_color = "#BDBDBD";
	   		}

			// set d3 log scale for radius
			var rScale = d3.scale.log()
			// domain gets passed into d3
			// range comes back/return. smallest spill will be 5 px, largest: 30px
				.domain([1, d3.max(StudentChange, function(d) { return d.Growth; })])
				.rangeRound([5,40]);	
			
			var formatNumber = d3.format(",.0f");	// use d3 to format numbers

	
			if (!d.Growth) {
				var expansion = 0; // if no value, make a triangle
				// d3 visualization framework, leaflet doesn't draw triangles
				var dot = new L.CircleMarker(
					[d.latitude, d.longitude], {
						numberOfSides: 3,
						rotation: 90.0,
						radius: 10,
						color: 'black',
						weight: 1,
						fillColor: dot_color,
						fillOpacity: 0.5,
						clickable: true
				});
				
			} else {
				r = rScale(d.Growth); // otherwise base circle radius on discharge amount, coor set above
				var expansion = formatNumber(d.GrowthDecline) + " change";
				
				var dot = new L.CircleMarker(
					[d.latitude, d.longitude], {
						radius: r,
						color: 'black',
						weight: 1,
						fillColor: dot_color,
						fillOpacity: 0.5,
						clickable: true
				});

			}
			}

			
			var popupContent = "<h3>Total enrollment 2015: " + 2015 + "<h3>Total enrollment 2014: " + 2014 + " school size change " + d.Growth 
			+"</h3><p><i>students enrolled each year: - </i> " + d.Decline + "</b><br /><i>text text: </i> " + "</p>"; 
		
			var popupOptions = {
				minWidth: 50,
				maxWidth: 300, // make sure popup window doesn't get too big
				autoPanPadding: new L.Point(5, 60) // this makes sure the popup pushes down from the top (with space) of map rather than being hidden
			}
		});
							
			dot.bindPopup(popupContent, popupOptions);	// bind options to data

			dotsGroup.addLayer(dot);
			
		} // close if else for lat lon

	} // close each
	
	// add dotsGroup to the map
	dotsGroup.addTo(map).bringToBack();

// close initialize_map
var overlays = {
    "School Size": dotsGroup,
};