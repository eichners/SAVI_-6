
// FINAL PROJECT SCHOOL SIZE CHANGES: 2006 - 2015 MAP: script #3
// BASED ON CLASS 12: EXAMPLE WTIH ANNOTATION
// D3.js PIE CHART and LEAFLET and BOOTSTRAP

var map = L.map('map');
    map.fitBounds([
    [40.685626, -73.956567],
    [40.700211, -73.989289]
]);
var OpenMapSurfer_Grayscale = L.tileLayer('http://korona.geog.uni-heidelberg.de/tiles/roadsg/x={x}&y={y}&z={z}', {
     minZoom: 12,
    maxZoom: 19,
    attribution: 'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
});
// add these tiles to our map
map.addLayer(OpenMapSurfer_Grayscale);
// set data layer as global variable so we can use it in the layer control below

var svg = d3.select(map.getPanes().overlayPane).append("svg"),
    g = svg.append("g").attr("class", "leaflet-zoom-hide");

var schoolSize_geoJSON;


d3.json( "geojson/D13Enrollment06-15.geojson", function( data ) {
    // Merge the ag. data and GeoJSON
        // Loop through once for each ag. data value
        for (var i = 0; i < data.length; i++) {
    
            var dataSchool = data[i].school;              //Grab state name
            var dataValue = parseFloat(data[i].value);  //Grab data value, and convert from string to float
    // parseFloat converts strngs to numbers, float refers to real numbers/ decimals rather than integers
    // Find the corresponding state inside the GeoJSON
            for (var j = 0; j < json.features.length; j++) {
            
                var jsonSchool = json.features[j].properties.school;
    // set new variable to compare below
                if (dataSchool == jsonSchool) {
              
                    // Copy the data value into the JSON
                    json.features[j].properties.value = dataValue;
                    // console.log(dataValue);
                    //console.log(json.features[j]properties.value;
                    // Stop looking through the JSON
                    break;
                    
                }
            }       
        }

    var dataset = data;
    // draw the dataset on the map
    plotDataset(dataset);
    //creates a dropdown in the sidebar that we can use to fire map events and update the D3 chart
    // createDropdown(dataset);
});

// function to plot the dataset passed to it
function plotDataset(dataset) {
    schoolSize_geoJSON = L.geoJson(dataset, {
    //     style: mapStyle,
     //   onEachFeature: mapOnEachFeature
    }).addTo(map);

    // create layer controls
    // createLayerControls(); 
}
// create a layer groups to catch the new markers
var dotsGroup = L.featureGroup();

// set dataset as global variable and empty
var dataset;



function drawDots(dataset) {
// function drawDots(dataset, dateView) {
// this was from above with dateView
// // before dimensions set
// 	console.log(dataset);
// 	// nothing on console from this
// // cross filter is a plugin function? data dimensions: any variable in dataset can be made into dimensions and use it to filter out multiple other data
//     // load dataset into crossfilter (look this up on github (crossfilter and square))
//     // this tool can allow oen to use multilple aspects of data to filter things, like distance, time, etc. 
//     // works by setting up dimensions. see below
// 	var cf = crossfilter(dataset);

// 	// set dimensions for filtering by sample date: anonymous function calls back to data above
// 	// needs to be javascript date hence the discover_date_object in function below
// 	// all data live in the cf.dimension because it's been passed through the crossfilter
// 	var bySchoolSize = cf.dimension(function(d) { return d.GrowthDecline; });
// 	console.log(byStudentChange); // bySampleDate = cross filter variable
// 	// above console.log will show the crossfilter data and functions generated by the crossfilter which are bound to dataset
// 	// use to sort data, use bottom and top records, filterAll one gets all of data, filterExact allows one to use specific number or string: ie if you want data only for Troy, NY
// 	// or if you want to look for specific volume of spills or
// 	// we will use filterRange because we an to set date range to see spill in that time
// 	// use dot chaining for this because filters are already bound to dataset

// 	// default values for filterMin and filterMax
// 	// don't always know min and max dates since new data comes in: this figures that out
// 	var datadateMin = d3.min(dataset, function(d) { return d.GrowthDecline; });
// 	var datadateMax = d3.max(dataset, function(d) { return d.GrowthDecline; });
// 	// Not offereing time based choices, so I think below is not needed: cloning because for some reason we want to extract a date from data and make a new one???
// 	// var filterMax = datadateMax.clone();
	
// 	// // set filterMin base on selection
// 	// if (dateView == 1) {
// 	// 	var filterMin = datadateMax.clone();
// 	// 	//dateView gets passed into drawDots function (initiated above at top of object)
// 	// 	filterMin.addDays(-7); // gives 7 day range
// 	// } else if (dateView == 2){  
// 	// 	var filterMin = datadateMax.clone();
// 	// 	filterMin.addMonths(-1); 
// 	// } else if (dateView == 3) {
// 	// 	var filterMin = datadateMin.clone();
// 	// }	
		
// 	// initialize map and charts
// 	initialize_map(filterMin, filterMax, datadateMin, datadateMax, bySampleDate);


// ///////////////////////////////////////////////////////

// function initialize_map(filterMin, filterMax, datadateMax, datadateMin, byStudentChange) {

// 	// clear all map layers	
// 	dotsGroup.clearLayers();

// 	// clear legend 
// 	d3.select(".legendmap").remove();

// 	// pass date objects to the legend function filterMin and Max set above
// 	drawTimeControlLegend(filterMin, filterMax);

// 	// filter data by data range selected: using crossfilter functions range variable knows it's a date: filterMin, filterMax are JS objects being passed
// 	//into function. 
// 	byStudentChange.filterRange([filterMin, filterMax]);

// 	// return all data within the filterneed to extract data from variables .top(infinitey )
// 	var dataByStudentChange = byStudentChange.top(Infinity);
// 	console.log(dataByStudentChange);

// 	// iterate thorugh dataset and create a markers and a marker group for the points
// 	// fpr each loop. (all data sits in d. whatever field is)
// 	$.each(dataByStudentChange, function( i, d ) {

	
// 		if (!d.latitude || !d.longitude) {
// 		} else {

// 			// set dot fill color
// 	   		if (d.GrowthDecline > 0) {
// 	   			//If enrollment numbers reflect an expansion 
// 		   		dot_color = "#F03B20";
// 	   		} else if (d.GrowthDecline === 0) {
// 	   			//If count is greater than zero in Decline column I want nothing to appear
// 		   		dot_color = "null";
// 	   		} else if (d.GrowthDecline < 0) {
// 	   			//If count is within the possible risk range
// 		   		dot_color = "#FFEDA0";
// 	   		} else {
// 	   			//If count is within the unacceptable range
// 		   		dot_color = "#BDBDBD";
// 	   		}

// 			// set d3 log scale for radius
// 			var rScale = d3.scale.log()
// 			// domain gets passed into d3
// 			// range comes back/return. smallest spill will be 5 px, largest: 30px
// 				.domain([1, d3.max(StudentChange, function(d) { return d.Growth; })])
// 				.rangeRound([5,40]);	
			
// 			var formatNumber = d3.format(",.0f");	// use d3 to format numbers

	
// 			if (!d.Growth) {
// 				var expansion = 0; // if no value, make a triangle
// 				// d3 visualization framework, leaflet doesn't draw triangles
// 				var dot = new L.CircleMarker(
// 					[d.latitude, d.longitude], {
// 						numberOfSides: 3,
// 						rotation: 90.0,
// 						radius: 10,
// 						color: 'black',
// 						weight: 1,
// 						fillColor: dot_color,
// 						fillOpacity: 0.5,
// 						clickable: true
// 				});
				
// 			} else {
// 				r = rScale(d.Growth); // otherwise base circle radius on discharge amount, coor set above
// 				var expansion = formatNumber(d.GrowthDecline) + " change";
				
// 				var dot = new L.CircleMarker(
// 					[d.latitude, d.longitude], {
// 						radius: r,
// 						color: 'black',
// 						weight: 1,
// 						fillColor: dot_color,
// 						fillOpacity: 0.5,
// 						clickable: true
// 				});

// 			}
// 			}

			
			var popupContent = "<h3>Total enrollment 2015: " + 2015 + "<h3>Total enrollment 2014: " + 2014 + " school size change " + d.Growth 
			+"</h3><p><i>students enrolled each year: - </i> " + d.Decline + "</b><br /><i>text text: </i> " + "</p>"; 
		
			var popupOptions = {
				minWidth: 50,
				maxWidth: 300, // make sure popup window doesn't get too big
				autoPanPadding: new L.Point(5, 60) // this makes sure the popup pushes down from the top (with space) of map rather than being hidden
			}
		//});
							
			dot.bindPopup(popupContent, popupOptions);	// bind options to data

			dotsGroup.addLayer(dot);
			
		} // close if else for lat lon

	// // close each
	
	// add dotsGroup to the map
	dotsGroup.addTo(map).bringToBack();

// close initialize_map
var overlays = {
    "School Size": dotsGroup,
};